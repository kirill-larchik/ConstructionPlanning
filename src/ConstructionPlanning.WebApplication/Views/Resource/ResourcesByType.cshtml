@using ConstructionPlanning.WebApplication.Models.Resource
@model ConstructionPlanning.WebApplication.Models.Resource.ResourceByTypeViewModel

@{
    ViewData["Title"] = "Список ресурсов";
}

<h1>Список ресурсов типа "@Model.ResourceTypeName"</h1>

<p>
    @Html.ActionLink("Назад", "Index", "ResourceType", new { id = Model.ResourceTypeId }, new { @class="btn btn-secondary" })
</p>
<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ModelForDisplayingNames.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModelForDisplayingNames.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModelForDisplayingNames.AvaliableAmount)
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Resources) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AvaliableAmount)
            </td>
        </tr>
}
    </tbody>
</table>
@if (Model.PageViewModel.HasPreviousPage)
{
    <a asp-action="GetResourcesByResourceTypeId"
       asp-route-resourceTypeId="@(Model.ResourceTypeId)"
       asp-route-page="@(Model.PageViewModel.PageNumber - 1)"
       class="btn btn-outline-dark">
        <i class="glyphicon glyphicon-chevron-left"></i>
        Назад
    </a>
}
@if (Model.PageViewModel.HasNextPage)
{
    <a asp-action="GetResourcesByResourceTypeId"
       asp-route-resourceTypeId="@(Model.ResourceTypeId)"
       asp-route-page="@(Model.PageViewModel.PageNumber + 1)"
       class="btn btn-outline-dark">
        Вперед
        <i class="glyphicon glyphicon-chevron-right"></i>
    </a>
}
